% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/observe.R
\name{observe_contains}
\alias{observe_contains}
\alias{observe_starts_with}
\alias{observe_ends_with}
\alias{observe_one_of}
\title{Select helpers}
\usage{
observe_contains(match, handlerExpr, input, ignore.case = TRUE)

observe_starts_with(match, handlerExpr, input, ignore.case = TRUE)

observe_ends_with(match, handlerExpr, input, ignore.case = TRUE)

observe_one_of(elements, handlerExpr, input, ignore.case = TRUE)
}
\arguments{
\item{match}{character}

\item{handlerExpr}{The expression to call whenever \code{eventExpr} is
invalidated. This should be a side-effect-producing action (the return
value will be ignored). It will be executed within an \code{\link[=isolate]{isolate()}}
scope.}

\item{input}{reactive object to observe}

\item{ignore.case}{logical If TRUE ignores case when matching names, Default: TRUE}

\item{elements}{character vector contains names of elements in the reactive object}
}
\value{
observer reference class object
}
\description{
These functions allow you to observe multiple reactive elements based on their names
}
\details{
The internal \link{shiny:observeEvent} is passed a variable \code{var_}
that contains the matched element name in the reactive object input. That variable
can be defined as a paramter of handlerExpr.
}
\examples{
\dontrun{
if(interactive()){
ui <- shiny::fluidPage(
 shiny::column(width = 6,
               lapply(1:4,FUN = function(x){
                 shiny::textInput(inputId = sprintf('txt_\%02d',x),
                                  label = NULL,
                                  value = '',
                                  placeholder = letters[x])
               })),
 shiny::column(width = 6,
               lapply(1:4,FUN = function(x){
                 shiny::actionButton(inputId = sprintf('btn_\%02d',x),label = 'update')
               })
               )
)

server <- shiny::shinyServer(function(input, output,session) {

 shinyselect::observe_contains('btn_0(1|3)',
                     handlerExpr = function(var_){
                       shiny::updateTextInput(
                         session,
                         inputId = gsub('btn','txt',var_),
                         value   = strrep(letters[as.numeric(gsub('[^0-9]','',var_))],3)
                         )
                     },input)

 shinyselect::observe_one_of(c('btn_02','btn_04'),
                               handlerExpr = function(var_){
                                 shiny::updateTextInput(
                                   session,
                                   inputId = gsub('btn','txt',var_),
                                   placeholder = 'something new'
                                 )
                               },input)

})

shiny::shinyApp(ui = ui, server = server)
 }
}
}
